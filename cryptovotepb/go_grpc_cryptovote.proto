syntax = "proto3";

option go_package = "github.com/caioformiga/go_grpc_cryptovote/cryptovotepb";

package cryptovotepb;

/*
  O gRPC usa o PROTOCOL BUFFER para trafegar dados entre cliente e servidor
  Cada message definida aqui será convertida em struct pelo protoc
*/
// EmptyReq é usada para invocar metodos/func rpc sem parametros (in/out)
message EmptyReq {  
}

// CryptoVote é usada para invocar metodos/func que usa dados CryptoVote como parametro (in/ou)
// Além dos tipos básico (int32 e string) possui uma message do tipo CryptoVote, acessível pelo campo crypto
message CryptoVote {  
  string name = 1;
  string symbol = 2;
  int32 qtd_upvote = 3;
  int32 qtd_downvote = 4;
}

message CreateCryptoReq {
  CryptoVote crypto = 1;
}

message RetrieveCryptoReq {
  CryptoVote filter = 1;
}

message UpdateCryptoReq {
  CryptoVote filter = 1;
  string newName = 2;
  string newSymbol = 3;
}

message AddVoteReq {
  string name = 1;
  string symbol = 2;
}

message TotalChangesRes{
  int32 qtd = 1;
}

message DeleteCryptoReq {
  CryptoVote filter = 1;
}


service CryptoVoteService {
  // Atualiza dados de uma CryptoVote usando um simple RPC.
  rpc CreateCryptoVote(CreateCryptoReq) returns (TotalChangesRes) {}

  // Recupera dados de uma CryptoVote usando Server-Side Streaming RPC.
  rpc RetrieveAllCryptoVoteByFilter(RetrieveCryptoReq) returns (stream CryptoVote) {}

  // Atualiza dados de uma CryptoVote usando um simple RPC.
  rpc UpdateOneCryptoVoteByFilter(UpdateCryptoReq) returns (TotalChangesRes) {}

  // Atualiza dados de Qtd_Upvote de uma CryptoVote usando um simple RPC.
  rpc AddUpVote(AddVoteReq) returns (TotalChangesRes) {}

  // Atualiza dados de Qtd_Upvote de uma CryptoVote usando um simple RPC.
  rpc AddDownVote(AddVoteReq) returns (TotalChangesRes) {}

  // Atualiza dados de uma CryptoVote usando um simple RPC.
  rpc DeleteAllCryptoVoteByFilter(DeleteCryptoReq) returns (TotalChangesRes) {}
}


/*
  Diferença entre Simple RPC e Server-Side Streaming RPC
  

  Simple RPC: the client sends a single request to the server and 
  gets a single response back, just like a normal function call.

  
  Server-Side streaming RPC: the client sends a request to the server and 
  gets a stream to read a sequence of messages back. The client reads from 
  the returned stream until there are no more messages. gRPC guarantees 
  message ordering within an individual RPC call.

  source: https://grpc.io/docs/what-is-grpc/core-concepts/
*/