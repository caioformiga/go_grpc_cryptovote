syntax = "proto3";

option go_package = "github.com/caioformiga/go_grpc_cryptovote/cryptovotepb";

package cryptovotepb;

// The EmptyReq message containing the CryptoVote data.
message EmptyReq {}

// The CryptoVote message containing the CryptoVote data.
message CryptoVote {    
    CryptoCurrency crypto = 1;
    int32 qtd_upvote = 2;
    int32 qtd_downvote = 3;
    string idHex = 4;
}

// The CryptoCurrency message containing as CryptoCurrency
message CryptoCurrency {
    string name = 1;
    string symbol = 2;
}

service CryptoVoteService {
  
  // Obtains all CryptoCurrency using a Server-Side Streaming RPC
  rpc ListAllCryptoCurrencies(EmptyReq) returns (stream CryptoCurrency) {}

  // Obtains all CryptoVotes using a Server-Side Streaming RPC
  // rpc GetStreamCryptoVotes(EmptyReq) returns (stream CryptoVote) {}
}


/*
  Simple RPC
  Unary RPCs where the client sends a single request to the server and 
  gets a single response back, just like a normal function call.

  Server-Side Streaming RPC
  Server streaming RPCs where the client sends a request to the server and 
  gets a stream to read a sequence of messages back. The client reads from 
  the returned stream until there are no more messages. gRPC guarantees 
  message ordering within an individual RPC call.

  source: https://grpc.io/docs/what-is-grpc/core-concepts/
*/