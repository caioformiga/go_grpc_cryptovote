// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: cryptovotepb/go_grpc_cryptovote.proto

package cryptovotepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The EmptyReq message containing the CryptoVote data.
type EmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReq) Reset() {
	*x = EmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReq) ProtoMessage() {}

func (x *EmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReq.ProtoReflect.Descriptor instead.
func (*EmptyReq) Descriptor() ([]byte, []int) {
	return file_cryptovotepb_go_grpc_cryptovote_proto_rawDescGZIP(), []int{0}
}

// GetCryptocurrencyResponse message
type GetCryptocurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uma lista de Cryptocurrency
	Currencies []*Cryptocurrency `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
}

func (x *GetCryptocurrencyResponse) Reset() {
	*x = GetCryptocurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptocurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptocurrencyResponse) ProtoMessage() {}

func (x *GetCryptocurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptocurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetCryptocurrencyResponse) Descriptor() ([]byte, []int) {
	return file_cryptovotepb_go_grpc_cryptovote_proto_rawDescGZIP(), []int{1}
}

func (x *GetCryptocurrencyResponse) GetCurrencies() []*Cryptocurrency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

// GetCryptoVoteResponse message
type GetCryptoVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uma lista de CryptoVote
	Cyptovotes []*CryptoVote `protobuf:"bytes,1,rep,name=cyptovotes,proto3" json:"cyptovotes,omitempty"`
}

func (x *GetCryptoVoteResponse) Reset() {
	*x = GetCryptoVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoVoteResponse) ProtoMessage() {}

func (x *GetCryptoVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoVoteResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoVoteResponse) Descriptor() ([]byte, []int) {
	return file_cryptovotepb_go_grpc_cryptovote_proto_rawDescGZIP(), []int{2}
}

func (x *GetCryptoVoteResponse) GetCyptovotes() []*CryptoVote {
	if x != nil {
		return x.Cyptovotes
	}
	return nil
}

// The CryptoVote message containing the CryptoVote data.
type CryptoVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypto      *Cryptocurrency `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
	QtdUpvote   int32           `protobuf:"varint,2,opt,name=qtd_upvote,json=qtdUpvote,proto3" json:"qtd_upvote,omitempty"`
	QtdDownvote int32           `protobuf:"varint,3,opt,name=qtd_downvote,json=qtdDownvote,proto3" json:"qtd_downvote,omitempty"`
	IdHex       string          `protobuf:"bytes,4,opt,name=idHex,proto3" json:"idHex,omitempty"`
}

func (x *CryptoVote) Reset() {
	*x = CryptoVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoVote) ProtoMessage() {}

func (x *CryptoVote) ProtoReflect() protoreflect.Message {
	mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoVote.ProtoReflect.Descriptor instead.
func (*CryptoVote) Descriptor() ([]byte, []int) {
	return file_cryptovotepb_go_grpc_cryptovote_proto_rawDescGZIP(), []int{3}
}

func (x *CryptoVote) GetCrypto() *Cryptocurrency {
	if x != nil {
		return x.Crypto
	}
	return nil
}

func (x *CryptoVote) GetQtdUpvote() int32 {
	if x != nil {
		return x.QtdUpvote
	}
	return 0
}

func (x *CryptoVote) GetQtdDownvote() int32 {
	if x != nil {
		return x.QtdDownvote
	}
	return 0
}

func (x *CryptoVote) GetIdHex() string {
	if x != nil {
		return x.IdHex
	}
	return ""
}

// The Cryptocurrency message containing as Cryptocurrency
type Cryptocurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *Cryptocurrency) Reset() {
	*x = Cryptocurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cryptocurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cryptocurrency) ProtoMessage() {}

func (x *Cryptocurrency) ProtoReflect() protoreflect.Message {
	mi := &file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cryptocurrency.ProtoReflect.Descriptor instead.
func (*Cryptocurrency) Descriptor() ([]byte, []int) {
	return file_cryptovotepb_go_grpc_cryptovote_proto_rawDescGZIP(), []int{4}
}

func (x *Cryptocurrency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cryptocurrency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

var File_cryptovotepb_go_grpc_cryptovote_proto protoreflect.FileDescriptor

var file_cryptovotepb_go_grpc_cryptovote_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2f, 0x67,
	0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76,
	0x6f, 0x74, 0x65, 0x70, 0x62, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x74, 0x64, 0x5f, 0x75, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x74, 0x64, 0x55, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x74, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x74, 0x64, 0x44, 0x6f,
	0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x48, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x48, 0x65, 0x78, 0x22, 0x3c, 0x0a, 0x0e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x32, 0xeb, 0x02, 0x0a, 0x11, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70,
	0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x56, 0x6f, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x69, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x69,
	0x67, 0x61, 0x2f, 0x67, 0x6f, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x76, 0x6f, 0x74, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x76, 0x6f, 0x74, 0x65,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cryptovotepb_go_grpc_cryptovote_proto_rawDescOnce sync.Once
	file_cryptovotepb_go_grpc_cryptovote_proto_rawDescData = file_cryptovotepb_go_grpc_cryptovote_proto_rawDesc
)

func file_cryptovotepb_go_grpc_cryptovote_proto_rawDescGZIP() []byte {
	file_cryptovotepb_go_grpc_cryptovote_proto_rawDescOnce.Do(func() {
		file_cryptovotepb_go_grpc_cryptovote_proto_rawDescData = protoimpl.X.CompressGZIP(file_cryptovotepb_go_grpc_cryptovote_proto_rawDescData)
	})
	return file_cryptovotepb_go_grpc_cryptovote_proto_rawDescData
}

var file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cryptovotepb_go_grpc_cryptovote_proto_goTypes = []interface{}{
	(*EmptyReq)(nil),                  // 0: cryptovotepb.EmptyReq
	(*GetCryptocurrencyResponse)(nil), // 1: cryptovotepb.GetCryptocurrencyResponse
	(*GetCryptoVoteResponse)(nil),     // 2: cryptovotepb.GetCryptoVoteResponse
	(*CryptoVote)(nil),                // 3: cryptovotepb.CryptoVote
	(*Cryptocurrency)(nil),            // 4: cryptovotepb.Cryptocurrency
}
var file_cryptovotepb_go_grpc_cryptovote_proto_depIdxs = []int32{
	4, // 0: cryptovotepb.GetCryptocurrencyResponse.currencies:type_name -> cryptovotepb.Cryptocurrency
	3, // 1: cryptovotepb.GetCryptoVoteResponse.cyptovotes:type_name -> cryptovotepb.CryptoVote
	4, // 2: cryptovotepb.CryptoVote.crypto:type_name -> cryptovotepb.Cryptocurrency
	0, // 3: cryptovotepb.CryptoVoteService.ListAllCryptoCurrencies:input_type -> cryptovotepb.EmptyReq
	0, // 4: cryptovotepb.CryptoVoteService.GetStreamCryptoCurrencies:input_type -> cryptovotepb.EmptyReq
	0, // 5: cryptovotepb.CryptoVoteService.ListAllCryptoVotes:input_type -> cryptovotepb.EmptyReq
	0, // 6: cryptovotepb.CryptoVoteService.GetStreamCryptoVotes:input_type -> cryptovotepb.EmptyReq
	1, // 7: cryptovotepb.CryptoVoteService.ListAllCryptoCurrencies:output_type -> cryptovotepb.GetCryptocurrencyResponse
	4, // 8: cryptovotepb.CryptoVoteService.GetStreamCryptoCurrencies:output_type -> cryptovotepb.Cryptocurrency
	2, // 9: cryptovotepb.CryptoVoteService.ListAllCryptoVotes:output_type -> cryptovotepb.GetCryptoVoteResponse
	3, // 10: cryptovotepb.CryptoVoteService.GetStreamCryptoVotes:output_type -> cryptovotepb.CryptoVote
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cryptovotepb_go_grpc_cryptovote_proto_init() }
func file_cryptovotepb_go_grpc_cryptovote_proto_init() {
	if File_cryptovotepb_go_grpc_cryptovote_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptocurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cryptocurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cryptovotepb_go_grpc_cryptovote_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cryptovotepb_go_grpc_cryptovote_proto_goTypes,
		DependencyIndexes: file_cryptovotepb_go_grpc_cryptovote_proto_depIdxs,
		MessageInfos:      file_cryptovotepb_go_grpc_cryptovote_proto_msgTypes,
	}.Build()
	File_cryptovotepb_go_grpc_cryptovote_proto = out.File
	file_cryptovotepb_go_grpc_cryptovote_proto_rawDesc = nil
	file_cryptovotepb_go_grpc_cryptovote_proto_goTypes = nil
	file_cryptovotepb_go_grpc_cryptovote_proto_depIdxs = nil
}
