// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cryptovotepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoVoteServiceClient is the client API for CryptoVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoVoteServiceClient interface {
	// Obtains all CryptoCurrency using a Server-Side Streaming RPC
	ListAllCryptoCurrencies(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (CryptoVoteService_ListAllCryptoCurrenciesClient, error)
}

type cryptoVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoVoteServiceClient(cc grpc.ClientConnInterface) CryptoVoteServiceClient {
	return &cryptoVoteServiceClient{cc}
}

func (c *cryptoVoteServiceClient) ListAllCryptoCurrencies(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (CryptoVoteService_ListAllCryptoCurrenciesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptoVoteService_ServiceDesc.Streams[0], "/cryptovotepb.CryptoVoteService/ListAllCryptoCurrencies", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptoVoteServiceListAllCryptoCurrenciesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptoVoteService_ListAllCryptoCurrenciesClient interface {
	Recv() (*CryptoCurrency, error)
	grpc.ClientStream
}

type cryptoVoteServiceListAllCryptoCurrenciesClient struct {
	grpc.ClientStream
}

func (x *cryptoVoteServiceListAllCryptoCurrenciesClient) Recv() (*CryptoCurrency, error) {
	m := new(CryptoCurrency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CryptoVoteServiceServer is the server API for CryptoVoteService service.
// All implementations must embed UnimplementedCryptoVoteServiceServer
// for forward compatibility
type CryptoVoteServiceServer interface {
	// Obtains all CryptoCurrency using a Server-Side Streaming RPC
	ListAllCryptoCurrencies(*EmptyReq, CryptoVoteService_ListAllCryptoCurrenciesServer) error
	mustEmbedUnimplementedCryptoVoteServiceServer()
}

// UnimplementedCryptoVoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoVoteServiceServer struct {
}

func (UnimplementedCryptoVoteServiceServer) ListAllCryptoCurrencies(*EmptyReq, CryptoVoteService_ListAllCryptoCurrenciesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAllCryptoCurrencies not implemented")
}
func (UnimplementedCryptoVoteServiceServer) mustEmbedUnimplementedCryptoVoteServiceServer() {}

// UnsafeCryptoVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoVoteServiceServer will
// result in compilation errors.
type UnsafeCryptoVoteServiceServer interface {
	mustEmbedUnimplementedCryptoVoteServiceServer()
}

func RegisterCryptoVoteServiceServer(s grpc.ServiceRegistrar, srv CryptoVoteServiceServer) {
	s.RegisterService(&CryptoVoteService_ServiceDesc, srv)
}

func _CryptoVoteService_ListAllCryptoCurrencies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptoVoteServiceServer).ListAllCryptoCurrencies(m, &cryptoVoteServiceListAllCryptoCurrenciesServer{stream})
}

type CryptoVoteService_ListAllCryptoCurrenciesServer interface {
	Send(*CryptoCurrency) error
	grpc.ServerStream
}

type cryptoVoteServiceListAllCryptoCurrenciesServer struct {
	grpc.ServerStream
}

func (x *cryptoVoteServiceListAllCryptoCurrenciesServer) Send(m *CryptoCurrency) error {
	return x.ServerStream.SendMsg(m)
}

// CryptoVoteService_ServiceDesc is the grpc.ServiceDesc for CryptoVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptovotepb.CryptoVoteService",
	HandlerType: (*CryptoVoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllCryptoCurrencies",
			Handler:       _CryptoVoteService_ListAllCryptoCurrencies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cryptovotepb/go_grpc_cryptovote.proto",
}
